generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String?
  email      String?  @unique
  password   String?
  image      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_active  Boolean  @default(true)

  // ⬅️ relation กลับจาก Report
  reports Report[] @relation("UserReports")

  @@map("User")
}

model Project {
  id         String    @id @default(cuid())
  name       String
  created_at DateTime  @default(now())
  created_by String
  updated_at DateTime  @updatedAt
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
  is_active  Boolean   @default(true)

  // ⬅️ relation กลับจาก Report
  reports Report[]

  @@map("Project")
}

model Task {
  id         String    @id @default(cuid())
  name       String
  created_at DateTime  @default(now())
  created_by String
  updated_at DateTime  @updatedAt
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
  is_active  Boolean   @default(true)

  // ⬅️ relation กลับจาก Report
  reports Report[]

  @@map("Task")
}

model Report {
  id          String    @id @default(cuid())
  project_id  String?
  task_id     String?
  report_date DateTime
  progress    Int?
  due_date    DateTime?
  created_at  DateTime  @default(now())
  created_by  String
  updated_at  DateTime  @updatedAt

  // ⬅️ relations
  createdBy    User           @relation("UserReports", fields: [created_by], references: [id])
  task         Task?          @relation(fields: [task_id], references: [id])
  project      Project?       @relation(fields: [project_id], references: [id])
  report_trans Report_trans[]
  comments     Comment[]

  @@index([created_by])
  @@index([project_id])
  @@index([task_id])
  @@map("Report")
}

enum Language {
  DEFAULT
  JP
}
model Report_trans {
  id         String   @id @default(cuid())
  report_id  String
  language   Language
  title      String
  detail     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  report Report @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@index([report_id])
  @@map("Report_trans")
}

model Comment {
  id         String   @id @default(cuid())
  report_id  String
  content    String
  created_at DateTime @default(now())
  created_by String
  updated_at DateTime @updatedAt
  updated_by String?

  report Report @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@index([report_id])
  @@map("Comment")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String

//   refresh_token     String?   @db.Text
//   access_token      String?   @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?   @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

/**
 * ตัวอย่างตารางธุรกิจของคุณ
 */
// model Post {
//   id        String   @id @default(cuid())
//   title     String
//   createdAt DateTime @default(now())
// }
